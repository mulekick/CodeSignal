'use strict'
combs = (c1, c2) => {
	const l1 = c1.length, l2 = c2.length,
	check = (v1, v2) => !v1 || !v2 ? true :
						v1 === ' ' || v2 === ' ' ? true :
						v1 === '*' ? v2 === '.' :
						v1 === '.';
	var r = [];
	c2 = ' '.repeat(l1) + c2;
	for (let n = 0; n < l1 + l2; n++) {
		let j = 0, k = Math.max(l1 + n, l1 + l2), m = Math.min(n, l1);
		for (;j < k; j++) if (!check(c1[j], c2[j])) break;	
		if (j === k) r.push(k - m);
		c1 = ' ' + c1;
	}
	return Math.min(...r);
}

/*
comb1: 	"*..*.*" 	=> l1 = 6
comb2: 	"*.***" 	=> l2 = 5

*..*.*				n				l1 + n			n = 0 										
      *.***			l1		 		l1 + l2			k = max(l1 + n, l1 + l2), m = min(n, l1) ==> L = k - m = 11
----------------------------------------------------------
 *..*.*				n				l1 + n			n = 1
      *.***			l1		 		l1 + l2			k = max(l1 + n, l1 + l2), m = min(n, l1)
----------------------------------------------------------
  *..*.*			n				l1 + n			n = 2 			
      *.***			l1		 		l1 + l2			k = max(l1 + n, l1 + l2), m = min(n, l1) ==> L = k - m = 9
----------------------------------------------------------
      *..*.*		n				l1 + n			n = l1
      *.***			l1		 		l1 + l2			k = max(l1 + n, l1 + l2), m = min(n, l1)
----------------------------------------------------------
           *..*.*	n				l1 + n			n = l1 + l2 	
      *.***			l1		 		l1 + l2	  		k = max(l1 + n, l1 + l2), m = min(n, l1) ==> L = k - m = 11
----------------------------------------------------------    
*/

